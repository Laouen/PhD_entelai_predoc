general:
  module_paths: ['/home/lbelloli/git/doctorado/PhD_entelai_predoc']
  save_path: ./
  verbose: 11

data_preprocess:
  output_storage_type: 
    X: npy
    y: npy
    features: npy
    label_encoder: pickle
  cache_output: On
  function: entelai_predoc_modules.preprocess_data.preprocess_data
  parameters:
    curated_targets: ./data/predoc_fleni_targets_curada.xlsx
    data_entelai_predoc_server: ./data/predoc_fleni_responses.csv

data_split:
  input_map:
    data_preprocess:
      X: 1
      y: 2
  output_storage_type: npy
  cache_output: On
  class: ConPipe.GraphNode.DataSplit.DataSplit
  parameters:
    function: sklearn.model_selection.train_test_split
    parameters:
      test_size: 0.25
      random_state: 42
      shuffle: On

feature_selection:
  input_map:
    data_split:
      X_train: X_train
      y_train: y_train
      X_test: X_test
  output_storage_type: npy
  cache_output: On
  function: entelai_predoc_modules.feature_selection.feature_selection

model_selection:
  input_map:
    feature_selection:
      X_train: X
    data_split:
      y_train: y
  output_storage_type: 
    estimator: pickle 
    cv_results_: csv
  cache_output: On
  class: ConPipe.GraphNode.ModelSelection.ModelSelection
  parameters:
    parameter_optimizer: 
      class: sklearn.model_selection.GridSearchCV
      scoring: accuracy # esto tiene que poder ser una funcion custom desde el módulo también
      parameters: 
        refit: On
    cv: 
      class: sklearn.model_selection.StratifiedKFold 
      parameters:
        n_splits: 5
        shuffle: On
        random_state: 42
    models: 
      LogisticRegression:
        class: sklearn.linear_model.LogisticRegression
        constructor_params:
          random_state: 42
          penalty: l2
          max_iter: 10000
        param_grid:
          C: [0.2, 0.4]
          solver: ['lbfgs']
        fit_params:
          sample_weight: null
      RandomForestClasifier:
        class: sklearn.ensemble.RandomForestClassifier
        constructor_params:
          random_state: 42
        param_grid:
          max_depth: [2,4,6]
          n_estimators: [10, 100, 1000]
        fit_params:
          sample_weight: null

predict_train:
  input_map:
    model_selection:
      estimator: estimator
    feature_selection:
      X_train: X
    data_split:
      y_train: y
  output_storage_type: npy
  cache_output: Off
  class: ConPipe.GraphNode.ModelPrediction.ModelPrediction
  parameters:
    cv:
      class: sklearn.model_selection.StratifiedKFold 
      parameters:
        n_splits: 5
        shuffle: On
        random_state: 42

predict_test:
  input_map:
    model_selection:
      estimator: estimator
    feature_selection:
      X_test: X
    data_split:
      y_test: y
  output_storage_type: npy
  cache_output: On
  class: ConPipe.GraphNode.ModelPrediction.ModelPrediction

evaluate_test:
  input_map:
    predict_test:
      y_true: y_true
      y_pred: y_pred
      y_probas: y_probas
      classes: classes
  cache_output: On
  class: ConPipe.GraphNode.ResultEvaluation.ResultEvaluation
  parameters:
    tag: test
    output_path: ./
    classes: [0,1]
    class_labels: 
      0: 0
      1: 1
    scores: 
      accuracy:
        function: sklearn.metrics.accuracy_score
        score_type: pred
      recall:
        function: sklearn.metrics.recall_score
        score_type: pred
        parameters:
          average: weighted
    charts:
      roc:
        function: ConPipe.visualizations.roc_chart
      confusion_matrix: 
        function: ConPipe.visualizations.confusion_matrix_chart
        parameters:
          annot: On
          cmap: flare
          fmt: g

evaluate_train:
  input_map:
    predict_train:
      y_true: y_true
      y_pred: y_pred
      y_probas: y_probas
      classes: classes
  cache_output: On
  class: ConPipe.GraphNode.ResultEvaluation.ResultEvaluation
  parameters:
    tag: train
    output_path: ./
    classes: [0,1]
    class_labels: 
      0: 0
      1: 1
    scores: 
      accuracy:
        function: sklearn.metrics.accuracy_score
        score_type: pred
      recall:
        function: sklearn.metrics.recall_score
        score_type: pred
        parameters:
          average: weighted
    charts:
      roc:
        function: ConPipe.visualizations.roc_chart
      confusion_matrix: 
        function: ConPipe.visualizations.confusion_matrix_chart
        parameters:
          annot: On
          cmap: flare
          fmt: g